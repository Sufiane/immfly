// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../db/dev.db"
}

model Admins {
  id       Int    @id @default(autoincrement())
  email    String @unique
  password String
}

model Products {
  id          Int               @id @default(autoincrement())
  name        String
  description String
  price       Int
  Orders      OrderHasProduct[]
  Carts       CartHasProduct[]
}

model Users {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  name      String
  password  String
  addresses Addresses[]
  orders    Orders[]
  Carts     Carts[]
}

model Addresses {
  id     Int      @id @default(autoincrement())
  userId Int      @map("user_id")
  user   Users    @relation(fields: [userId], references: [id])
  orders Orders[]
}

model Orders {
  id                Int               @id @default(autoincrement())
  date              DateTime
  state             String // Unfortunately Prisma does not map prisma enums to sqlite
  deliveryAddressId Int               @map("delivery_address_id")
  userId            Int               @map("user_id")
  DeliveryAddress   Addresses         @relation(fields: [deliveryAddressId], references: [id])
  Users             Users             @relation(fields: [userId], references: [id])
  Products          OrderHasProduct[]
}

model OrderHasProduct {
  productId Int      @map("product_id")
  Product   Products @relation(fields: [productId], references: [id])
  orderId   Int      @map("order_id")
  Order     Orders   @relation(fields: [orderId], references: [id])
  quantity  Int

  @@id([orderId, productId])
  @@map("order_has_product")
}

model Carts {
  // Since there is no expiration date on cart
  // each user only have one cart
  // the cart is emptied (ie: destroyed and created again) after each order
  userId   Int              @id @map("user_id")
  User     Users            @relation(fields: [userId], references: [id])
  Products CartHasProduct[]
}

model CartHasProduct {
  cartId    Int      @map("cart_id")
  Cart      Carts    @relation(fields: [cartId], references: [userId])
  productId Int      @map("product_id")
  Product   Products @relation(fields: [productId], references: [id])
  quantity  Int

  @@id([cartId, productId])
  @@map("cart_has_product")
}
